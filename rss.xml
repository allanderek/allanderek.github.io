<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding Diet</title><link>https://allanderek.github.io/</link><description>My quest to stop writing too much code.</description><atom:link rel="self" type="application/rss+xml" href="https://allanderek.github.io/rss.xml"></atom:link><language>en</language><lastBuildDate>Thu, 26 Jan 2017 10:42:37 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Login not required pattern</title><link>https://allanderek.github.io/posts/login-not-required-pattern/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Typically routes in a web application that require login are explicitly marked as such. Whilst routes that are open to general (anonymous) users, are left unmarked and hence implicitly do not require login. Because the default is to allow all users to visit a particular route, it is easy to forget to mark a route as requiring a login.&lt;/p&gt;
&lt;p&gt;I'm going to show a small pattern for making sure that all routes in a web application are explicitly marked as either requiring login or not-requiring login. As an example this will be done in a Python, Flask-based web application using &lt;a href="https://flask-login.readthedocs.io/en/latest/"&gt;Flask-Login&lt;/a&gt; but the general idea probably works in at least some other Python web application frameworks. &lt;/p&gt;
&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;Let's start with a very simple Flask web application that just has two routes:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/unprotected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unprotected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello everyone, anonymous users included!'&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/protected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello users, only those of you logged-in!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now, obviously we want the &lt;code&gt;protected&lt;/code&gt; route to only be available to those users who have logged in, whilst the &lt;code&gt;unprotected&lt;/code&gt; route is available to all. We'll leave the details of how users actually sign-up, log-in and log-out, see the &lt;a href="https://flask-login.readthedocs.io/en/latest/"&gt;Flask-Login documentation for examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To mark our &lt;code&gt;protected&lt;/code&gt; route we can use the decorator provided by Flask-Login:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/protected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@flask_login.login_required&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello users, only those of you logged-in!'&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;I only added two lines, the import of &lt;code&gt;flask_login&lt;/code&gt; and a second decorator to the &lt;code&gt;protected&lt;/code&gt; method. This is how Flask-Login works. You decorate those routes that you wish to be protected. As I said, this scheme is fine, but it is easy enough to forget to mark a route that should be protected.&lt;/p&gt;
&lt;h2&gt;Explicitly mark all routes&lt;/h2&gt;
&lt;p&gt;The scheme I used, was to make a decorator that accepted a parameter. If the parameter is &lt;code&gt;True&lt;/code&gt; then all routes associated with the decorated view function are marked as requiring login. In addition, this decorator sets an attribute on the view function itself indicating whether or not login is required. We can then check &lt;em&gt;all&lt;/em&gt; view functions and assert that they have the chosen attribute. So first the new view functions, with a decorator we'll add.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/unprotected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unprotected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello everyone, anonymous users included!'&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/protected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello users, only those of you logged-in!'&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;So fairly simple stuff. Now to create the decorator:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask_login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This just calls the original &lt;code&gt;@flask_login.login_required&lt;/code&gt; decorator in the case that the argument is &lt;code&gt;True&lt;/code&gt;, but in addition adds an attribute to the view function that we can check later.&lt;/p&gt;
&lt;h3&gt;Ensure all are marked&lt;/h3&gt;
&lt;p&gt;So to ensure that all routes have been marked in some way you just need to check all view functions have the &lt;code&gt;login_required&lt;/code&gt; attribute set:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view_functions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"{} needs to set whether login is required or not"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'login_required'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now if you run this you will get such an error. That is because you don't set up all of your own routes, in particular Flask provides a &lt;code&gt;static&lt;/code&gt; route. That's easy enough to ignore though:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ignored_views&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view_functions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"{} needs to set whether login is required or not"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ignored_views&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'login_required'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Tidy up&lt;/h3&gt;
&lt;p&gt;There are just a couple of small caveats. Firstly, Flask-Login, provides a decorator to indicate that not only is login required, but it must be a &lt;em&gt;fresh&lt;/em&gt; login. We can just allow passing &lt;code&gt;"fresh"&lt;/code&gt; as an argument to our &lt;code&gt;login_required&lt;/code&gt; decorator:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'fresh'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask_login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fresh_login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask_login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;To avoid polluting the namespace with our &lt;code&gt;ignored_views&lt;/code&gt; name and to indicate what the code is doing without needing a comment we can wrap our check in a function:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_all_views_declare_login_required&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ignored_views&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view_functions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"{} needs to set whether login is required or not"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ignored_views&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'login_required'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="n"&gt;check_all_views_declare_login_required&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Flask extensions&lt;/h3&gt;
&lt;p&gt;Many Flask extensions provide their own routes which are mapped to view functions that they have defined. You &lt;em&gt;could&lt;/em&gt; add those to the &lt;code&gt;ignored_views&lt;/code&gt; list, but this seems like additional maintenance. Worse, something like &lt;a href="https://flask-admin.readthedocs.io/en/latest/"&gt;Flask-Admin&lt;/a&gt; adds a large number of view functions. In addition, if you setup Flask-Admin to automatically generate model views for each of the models in your database, then if you add to your database model it will generate &lt;em&gt;more&lt;/em&gt; view functions and you will have to update your &lt;code&gt;ignored_views&lt;/code&gt; list again. The alternative is to perform your &lt;code&gt;check_all_views_declare_login_required&lt;/code&gt; before you call &lt;code&gt;init_app&lt;/code&gt; on your &lt;code&gt;admin&lt;/code&gt; instance. Suppose you have:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask_debugtoolbar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;

&lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask_admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'My app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'bootstrap3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;....&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;....&lt;/span&gt; &lt;span class="n"&gt;Actual&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;check_all_views_declare_login_required&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Initialise the Flask-Admin and Flask-DebugToolbar extensions after we have&lt;/span&gt;
&lt;span class="c1"&gt;# checked our own views for declaring login required.&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;flask_debugtoolbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DebugToolbarExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Final code&lt;/h3&gt;
&lt;p&gt;Just to provide the code in a simplest-as-possible form:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'fresh'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask_login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fresh_login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask_login&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/unprotected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unprotected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello everyone, anonymous users included!'&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/protected'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;protected&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello users, only those of you logged-in!'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_all_views_declare_login_required&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ignored_views&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view_functions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"{} needs to set whether login is required or not"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ignored_views&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'login_required'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="n"&gt;check_all_views_declare_login_required&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I quite like that I now explicitly state for each route whether I require login or not, rather than relying on a default. You could of course extend this to your particular privileges scheme, for example you may have levels of authentication, such as, administrator, super-user, paid-user, normal-user, anonymous, or whatever.&lt;/p&gt;
&lt;p&gt;Because the check is done whenever the module is imported, this check will also be performed when running your test-suite.&lt;/p&gt;
&lt;p&gt;This won't work if your view functions are actually view methods because you won't be able to set the attribute on the view &lt;em&gt;method&lt;/em&gt;. It is for exactly this reason that we had to use a list of &lt;code&gt;ignored_views&lt;/code&gt; and could not just do:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;static_view_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view_functions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;static_view_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;An alternative to this scheme would be to create your own &lt;code&gt;route&lt;/code&gt; decorator that takes as parameter whether login is required as well as the normal route information. Essentially combine route and login decorators.&lt;/p&gt;&lt;/div&gt;</description><category>code maintenance</category><category>flask</category><category>python</category><guid>https://allanderek.github.io/posts/login-not-required-pattern/</guid><pubDate>Thu, 26 Jan 2017 00:05:26 GMT</pubDate></item><item><title>if as syntax possibility</title><link>https://allanderek.github.io/posts/if-as-syntax-possibility/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;p&gt;I have a small niggle that comes up in my Python programming. I'm going to describe it and propose a possible addition to the Python programming language that would mostly solve the problem. However, I have not thought through this language modification at all thoroughly so at the moment it's just a germ of an idea. It wouldn't be a major change or fix any important problem in any case, it would just solve my own personal peeve.&lt;/p&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;First of all, a brief reminder of the very useful 'property' decorator in Python.
You may have an attribute on a class which is initially a simple value. However,
at some point later you realise that you need to calculate that attribute everytime
it is accessed. You may have something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;age&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;You then realise that this means you would have to continually update the person's
age. So instead you implement &lt;code&gt;age&lt;/code&gt; as a "property":&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;dob&lt;/span&gt; = &lt;span class="n"&gt;datetime&lt;/span&gt;.&lt;span class="n"&gt;today&lt;/span&gt;()

    &lt;span class="nv"&gt;@property&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; (&lt;span class="n"&gt;datetime&lt;/span&gt;.&lt;span class="n"&gt;today&lt;/span&gt;() - &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;dob&lt;/span&gt;).&lt;span class="n"&gt;years&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For the most part I like this ability and use it frequently. You may even have
two distinct classes which both implement a particular protocol, part of which
is that the object in question must have a particular attribute. It may be that
for one kind of object the attribute is indeed a simple attribute, but that for
another it must be calculated.&lt;/p&gt;
&lt;p&gt;So properties are, I think, generally a good addition to the language. One
downside is that sometimes a simple attribute access, &lt;code&gt;my_object.my_attribute&lt;/code&gt;
can be a more expensive operation than it looks because it is actually
implemented as a property.&lt;/p&gt;
&lt;h3&gt;Peeve&lt;/h3&gt;
&lt;p&gt;In Python I find myself doing something like the following quite often:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;if object.attribute:
    do_something(object.attribute)
else:
    do_something_else(object)
&lt;/pre&gt;


&lt;p&gt;For example, I might be showing a user of a web application why they cannot
perform some action they are attempting to:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;if post.unpublishable_reasons:
    for reason in post.unpublishable_reasons:
        flask.flash(reason)
    return render_template('error.html', ...)
else:
    return render_template('published.html', ...)
&lt;/pre&gt;


&lt;p&gt;Where &lt;code&gt;post.unpublishable_reasons&lt;/code&gt; might be a property on a &lt;code&gt;class&lt;/code&gt; which may
take some time to calculate:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;(&lt;span class="n"&gt;database&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    ....
    &lt;span class="nv"&gt;@property&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;unpublishable_reasons&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        ... &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ultimately&lt;/span&gt; &lt;span class="n"&gt;calculates&lt;/span&gt; &lt;span class="n"&gt;reasons&lt;/span&gt;...
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reasons&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Which then leads me to have code like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;reasons = post.unpublishable_reasons
if reasons:
    for reason in reasons:
        flask.flash(reason)
    return render_template('error.html', ...)
else:
    return render_template('published.html', ...)
&lt;/pre&gt;


&lt;p&gt;This just irks me as a little inelegant. So I confess that I would quite like
Python to allow something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;if post.unpublishable_reasons as reasons:
    for reason in reasons:
        flask.flash(reason)
    return render_template('error.html', ...)
else:
    return render_template('published.html', ...)
&lt;/pre&gt;


&lt;h3&gt;Comprehensions&lt;/h3&gt;
&lt;p&gt;This might also partially solve a problem with comprehensions in that you can
filter-then-map but not map-then-filter. A filter-then-map looks like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;positive_doubles = [i * 2 for i in my_numbers if i &amp;gt; 0]
&lt;/pre&gt;


&lt;p&gt;We first filter on each number (whether it is greater than zero) then each of
those numbers which makes it through the filter is multiplied by two. It's a bit
awkward to do the opposite, which is mapping the value first and then filtering
on the result of the map. So if we wanted all the squares of a list of numbers
that are less than 100 we require to do the operation twice:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;small_squares = [i * i for i in my_numbers if (i * i) &amp;lt; 100]
&lt;/pre&gt;


&lt;p&gt;Notice we had to have &lt;code&gt;i * i&lt;/code&gt; twice. It might be that the operation in question
is quite expensive, so instead we can have two comprehensions:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;small_squares = [x for x in (i * i for i in my_numbers) if x &amp;lt; 100]
&lt;/pre&gt;


&lt;p&gt;&lt;del&gt;Of course if the list is very long this might be a bit slow because we iterate
through it twice.&lt;/del&gt; Edit. Not true as we use a generator on the inner loop as
pointed out in the comments below.&lt;/p&gt;
&lt;p&gt;Now if we allow some kind of if-as syntax we might be able to do something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;new_list = [y for x in old_list if f(x) as y]
&lt;/pre&gt;


&lt;p&gt;This doesn't allow general filtering but would allow filtering out of falsey values.
I'm much less keen on this as I feel if Python were to attack the map-then-filter
problem for comprehensions then it should solve it completely.&lt;/p&gt;
&lt;p&gt;In particular this would not work for the &lt;code&gt;small_squares&lt;/code&gt; example, for that we
would need to allow something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;small_squares = [x for i in my_numbers if (i * i as x) &amp;gt; 100]
&lt;/pre&gt;


&lt;p&gt;Note that this is even more of an extension than that proposed. That is assigning
&lt;code&gt;x&lt;/code&gt; to a particular sub-expression of the condition.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>syntax</category><guid>https://allanderek.github.io/posts/if-as-syntax-possibility/</guid><pubDate>Sat, 14 Jan 2017 15:18:08 GMT</pubDate></item><item><title>Lazy calculation</title><link>https://allanderek.github.io/posts/lazy-calculation/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;p&gt;In many cases whilst programming there is a decision to be made as to whether
to &lt;em&gt;store&lt;/em&gt; some state, or (re)&lt;em&gt;caluate&lt;/em&gt; it as and when needed. Obviously every
situation is different and therefore there is no one answer which fits. In this
post I'm going to attempt to explain the distinction and the benefits/drawbacks
of either approach. I hope that just remembering that this choice exists will
force me to make an explicit choice, such that I may think about it a bit more.&lt;/p&gt;
&lt;h2&gt;Distinction&lt;/h2&gt;
&lt;p&gt;The distinction is a little akin to that between eager evaluation and lazy
evalution but it is not the same. The distinction here is about code-maintenance.
I'll start with a very simple example, and then move to a more realistic example
which involves access to a database, which makes the decision a bit more interesting.&lt;/p&gt;
&lt;p&gt;Suppose you have a very simple &lt;code&gt;class&lt;/code&gt; representing a person and the children
that they may have:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;boys&lt;/span&gt; = []
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;girls&lt;/span&gt; = []

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;have_baby_girl&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;)
        &lt;span class="n"&gt;girl&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="s"&gt;'female'&lt;/span&gt;)
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;girls&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;(&lt;span class="n"&gt;girl&lt;/span&gt;)
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;girl&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;have_baby_boy&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="n"&gt;boy&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="s"&gt;'male'&lt;/span&gt;)
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;boys&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;(&lt;span class="n"&gt;boy&lt;/span&gt;)
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;boy&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now, suppose somewhere in your code you wish to return the number of children
that a particular person has. You can either keep track of this, or calculate it
on the fly, here is the keep-track-of-it version:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;boys&lt;/span&gt; = []
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;girls&lt;/span&gt; = []
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;number_of_children&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;have_baby_girl&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;)
        &lt;span class="n"&gt;girl&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="s"&gt;'female'&lt;/span&gt;)
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;girls&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;(&lt;span class="n"&gt;girl&lt;/span&gt;)
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;number_of_children&lt;/span&gt; += &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;girl&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;have_baby_boy&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="n"&gt;boy&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="s"&gt;'boy'&lt;/span&gt;)
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;boys&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;(&lt;span class="n"&gt;boy&lt;/span&gt;)
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;number_of_children&lt;/span&gt; += &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;boy&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Here is a possible calculate-it-on-the-fly version:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;gender&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;gender&lt;/span&gt; = &lt;span class="n"&gt;gender&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;boys&lt;/span&gt; = []
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;girls&lt;/span&gt; = []

    &lt;span class="nv"&gt;@property&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;number_of_children&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;boys&lt;/span&gt;) + &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;girls&lt;/span&gt;)

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;have_baby_girl&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;)
        &lt;span class="n"&gt;girl&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="s"&gt;'female'&lt;/span&gt;)
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;girls&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;(&lt;span class="n"&gt;girl&lt;/span&gt;)
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;girl&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;have_baby_boy&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="n"&gt;boy&lt;/span&gt; = &lt;span class="n"&gt;Person&lt;/span&gt;(&lt;span class="s"&gt;'boy'&lt;/span&gt;)
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;boys&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;(&lt;span class="n"&gt;boy&lt;/span&gt;)
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;boy&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In this particular case I prefer the calculate-it-on-the-fly approach. I like
that I did not have to modify any existing code, I only had to add some. If I
add some other method (suppose an &lt;code&gt;adopt&lt;/code&gt; method) then in the keep-track-of-it
version I have to make sure I update our state variable &lt;code&gt;number_of_children&lt;/code&gt;
appropriately. Finally, if we change our definition of what a 'child' is,
suppose they have to be under 18 years-of-age, then keeping track-of-it, might
not work at all, or if it does I have to be very careful about updating parents
whenever a child ages.&lt;/p&gt;
&lt;p&gt;In terms of performance, this is often trickty to evaluate correctly. Essentially,
you're asking whether the calculation of the state on the fly, is more expensive,
than code to keep track of it. This of course depends hugely on often you inspect
the state. You may do a lot of work to keep-track of a state variable that is
never inspected, or inspected only very rarely. On the other hand, if it is
inspected often, but not updated much, the calculate-it-on-the-fly approach,
may be needlessly re-doing the exact same computation many times.&lt;/p&gt;
&lt;p&gt;As a side-note there is a &lt;a href="https://pypi.python.org/pypi/lazy/1.2"&gt;lazy&lt;/a&gt; package
for Python that lets you calculate attributes once when needed, and then stores
the result for later retrieval. Of course if you update anything the calculation
depends upon you have to make sure an invalidate the stored result. I've found
it is useful in the case that an attribute won't ever need to be re-calculated,
but might never need to be calculated at all (and is expensive to do so).&lt;/p&gt;
&lt;h2&gt;More interesting example&lt;/h2&gt;
&lt;p&gt;For in-memory occurrences such as the simple example above, often the choice is
pretty clear. Code is often clearer if you calculate-it-on-the-fly, and only
resort to keep-track-of-it whenever the value is somewhat expensive to calculate,
used very often, or particularly simple to keep track of.&lt;/p&gt;
&lt;p&gt;However, the choice becomes more interesting when the calculation of the value
involves some external state, even if keeping-track-of-it is done on the
external state. A common case is when the state is kept in a database. In Python,
you may well be using an ORM to access the external state. &lt;/p&gt;
&lt;p&gt;Consider an online game website, for some game that has four players. Let's
suppose the game is turn-based and players are not expected to be logged in for
the entire duration, but just take their turn whenever they are online. The game
then can be in multiple states: waiting for players, running, finished. So in
some ORM you might describe a game like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Game&lt;/span&gt;(&lt;span class="n"&gt;database&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;player_one_id&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;ForeignKey&lt;/span&gt;(&lt;span class="s"&gt;'user.id'&lt;/span&gt;))
    &lt;span class="n"&gt;player_two_id&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;ForeignKey&lt;/span&gt;(&lt;span class="s"&gt;'user.id'&lt;/span&gt;))
    &lt;span class="n"&gt;player_three_id&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;ForeignKey&lt;/span&gt;(&lt;span class="s"&gt;'user.id'&lt;/span&gt;))
    &lt;span class="n"&gt;player_four_id&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;ForeignKey&lt;/span&gt;(&lt;span class="s"&gt;'user.id'&lt;/span&gt;))

    &lt;span class="n"&gt;winner_id&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Integer&lt;/span&gt;, &lt;span class="n"&gt;ForeignKey&lt;/span&gt;(&lt;span class="s"&gt;'user.id'&lt;/span&gt;))

    .... &lt;span class="n"&gt;bunch&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;actually&lt;/span&gt; &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="k"&gt;state&lt;/span&gt; ....
&lt;/pre&gt;


&lt;p&gt;Now, suppose you wish to display a list of running games for a user, you could
do it something like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Game&lt;/span&gt;(&lt;span class="n"&gt;database&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    ... &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="o"&gt;before&lt;/span&gt; ...
    &lt;span class="n"&gt;state_names&lt;/span&gt; = [&lt;span class="s"&gt;'waiting'&lt;/span&gt;, &lt;span class="s"&gt;'running'&lt;/span&gt;, &lt;span class="s"&gt;'finished'&lt;/span&gt;]
    &lt;span class="k"&gt;state&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;Enum&lt;/span&gt;(*&lt;span class="n"&gt;state_names&lt;/span&gt;), &lt;span class="n"&gt;nullable&lt;/span&gt;=&lt;span class="nb"&gt;False&lt;/span&gt;, &lt;span class="k"&gt;default&lt;/span&gt;=&lt;span class="s"&gt;'waiting'&lt;/span&gt;)

    &lt;span class="nv"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;running_games&lt;/span&gt;(&lt;span class="n"&gt;user&lt;/span&gt;):
        &lt;span class="n"&gt;games&lt;/span&gt; = &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;query&lt;/span&gt;.&lt;span class="n"&gt;filter&lt;/span&gt;(
            &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="k"&gt;state&lt;/span&gt; == &lt;span class="s"&gt;'running'&lt;/span&gt;,
            &lt;span class="n"&gt;or_&lt;/span&gt;(
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_one_id&lt;/span&gt; == &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_two_id&lt;/span&gt; == &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_three_id&lt;/span&gt; == &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_four_id&lt;/span&gt; == &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
            )
        ).&lt;span class="nb"&gt;all&lt;/span&gt;()
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;games&lt;/span&gt;

    &lt;span class="nv"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;open_games&lt;/span&gt;(&lt;span class="n"&gt;user&lt;/span&gt;):
        &lt;span class="n"&gt;games&lt;/span&gt; = &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;query&lt;/span&gt;.&lt;span class="n"&gt;filter&lt;/span&gt;(
            &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="k"&gt;state&lt;/span&gt; == &lt;span class="s"&gt;'waiting'&lt;/span&gt;,
            &lt;span class="n"&gt;and_&lt;/span&gt;(
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_one_id&lt;/span&gt; != &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_two_id&lt;/span&gt; != &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_three_id&lt;/span&gt; != &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_four_id&lt;/span&gt; != &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
            )
        ).&lt;span class="nb"&gt;all&lt;/span&gt;()
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;games&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Using this way you would have to make sure that when the fourth player joins a
game the state is set to 'running', and when the game finishes the state is set
to 'finished', along with the 'winner' being set.&lt;/p&gt;
&lt;p&gt;Instead one could use calculate-it-on-the-fly as in:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Game&lt;/span&gt;(&lt;span class="n"&gt;database&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    ... &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="o"&gt;before&lt;/span&gt; ...
    &lt;span class="c c-Singleline"&gt;# No state column&lt;/span&gt;

    &lt;span class="nv"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;running_games&lt;/span&gt;(&lt;span class="n"&gt;user&lt;/span&gt;):
        &lt;span class="n"&gt;games&lt;/span&gt; = &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;query&lt;/span&gt;.&lt;span class="n"&gt;filter&lt;/span&gt;(
            &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_one_id&lt;/span&gt; != &lt;span class="n"&gt;None&lt;/span&gt;,
            &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_two_id&lt;/span&gt; != &lt;span class="n"&gt;None&lt;/span&gt;,
            &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_three_id&lt;/span&gt; != &lt;span class="n"&gt;None&lt;/span&gt;,
            &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_four_id&lt;/span&gt; != &lt;span class="n"&gt;None&lt;/span&gt;,
            &lt;span class="n"&gt;or_&lt;/span&gt;(
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_one_id&lt;/span&gt; == &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_two_id&lt;/span&gt; == &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_three_id&lt;/span&gt; == &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_four_id&lt;/span&gt; == &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
            ),
            &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;winner_id&lt;/span&gt; == &lt;span class="n"&gt;None&lt;/span&gt;
        ).&lt;span class="nb"&gt;all&lt;/span&gt;()
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;games&lt;/span&gt;

    &lt;span class="nv"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;open_games&lt;/span&gt;(&lt;span class="n"&gt;user&lt;/span&gt;):
        &lt;span class="n"&gt;games&lt;/span&gt; = &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;query&lt;/span&gt;.&lt;span class="n"&gt;filter&lt;/span&gt;(
            &lt;span class="n"&gt;or_&lt;/span&gt;(
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_one_id&lt;/span&gt; == &lt;span class="n"&gt;None&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_two_id&lt;/span&gt; == &lt;span class="n"&gt;None&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_three_id&lt;/span&gt; == &lt;span class="n"&gt;None&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_four_id&lt;/span&gt; == &lt;span class="n"&gt;None&lt;/span&gt;,
            )
            &lt;span class="n"&gt;and_&lt;/span&gt;(
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_one_id&lt;/span&gt; != &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_two_id&lt;/span&gt; != &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_three_id&lt;/span&gt; != &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
                &lt;span class="n"&gt;Game&lt;/span&gt;.&lt;span class="n"&gt;player_four_id&lt;/span&gt; != &lt;span class="n"&gt;user&lt;/span&gt;.&lt;span class="n"&gt;id&lt;/span&gt;,
            )
        ).&lt;span class="nb"&gt;all&lt;/span&gt;()
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;games&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This could be simplified a bit if we assume that players fill slots in order
such that it is never the case that &lt;code&gt;Game.player_four_id&lt;/code&gt; is not &lt;code&gt;None&lt;/code&gt; whilst
one of the others is. &lt;/p&gt;
&lt;p&gt;In this particular case then I think the keep-track-of-it is a little simpler.
But this hugely depends on the logic for joining a game, taking ones turn, and
finishing the game. In particular when a game is finished you have to set the
&lt;code&gt;winner_id&lt;/code&gt; column anyway, so it seems like not too much of a burden to
additionally set the &lt;code&gt;state&lt;/code&gt; column.&lt;/p&gt;
&lt;p&gt;However, there are many situations in which, calculate-it-on-the-fly is more
appropriate. A common case, occurs when the rules for state changes may change.
For example, in the game case, we may decide that as long as there are two
players, people can play the game, which is therefore &lt;code&gt;running&lt;/code&gt;. People may
join a &lt;code&gt;running&lt;/code&gt; game, provided it is not full, and may leave a &lt;code&gt;running&lt;/code&gt; game.
In this case, calculate-it-on-the-fly simply updates the rules for when a game
is &lt;code&gt;running&lt;/code&gt;. However, keep-track-of-it, not only has to update its rules for
when to modify a state (including now reverting a game from &lt;code&gt;running&lt;/code&gt; to
&lt;code&gt;waiting&lt;/code&gt; when someone leaves a two player game), but must also go through the
database and modify the &lt;code&gt;state&lt;/code&gt; column of any existing games. To do this, the
database update code will essentially have to mimic the &lt;code&gt;calculate-it-on-the-fly&lt;/code&gt;
code anyway.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There is often a choice to be made between maintaining some kind of state up-front,
and calculating it whenever it is required. Both are useful and should be used
depending on the situation. Recalling that there is such a choice may help a
programmer to explicitly make that choice, and perhaps even record the reasons
for it.&lt;/p&gt;&lt;/div&gt;</description><category>maintenance</category><category>python</category><guid>https://allanderek.github.io/posts/lazy-calculation/</guid><pubDate>Wed, 11 Jan 2017 17:47:02 GMT</pubDate></item><item><title>Covering dead code</title><link>https://allanderek.github.io/posts/covering-dead-code/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;p&gt;Dougal Matthews has written a &lt;a href="http://www.dougalmatthews.com/2016/Dec/16/finding-dead-code-with-vulture/"&gt;blog post&lt;/a&gt;
detailing how &lt;a href="https://pypi.python.org/pypi/vulture"&gt;Vulture&lt;/a&gt; can be used to find some dead code.
For me this was an important reminder not to rely on &lt;a href="https://pypi.python.org/pypi/coverage/"&gt;coverage analysis&lt;/a&gt;
to detect dead code and remove it from the your maintenance burden. More generally, whilst I adore
automated analysis tools that assist the developer in maintaining their code,
such automated analysis can give a false sense of completeness, or lead to the
developer believing that their code is "good enough". It is not a problem I have
any solution for though. The rest of the post will try to illuminate this view
point through the example of dead-code removal.&lt;/p&gt;
&lt;p&gt;Dead code seems like something that should be automatically detected by tools such as both Vulture and coverage.py and
indeed many instances of dead code &lt;em&gt;are&lt;/em&gt; automatically detected by such tools. However it is
worth remembering that there are instances of dead code which can never be automatically detected.&lt;/p&gt;
&lt;p&gt;As a brief reminder, dead code is code that we should delete. We should delete it generally
because it either has no way of being invoked, or because we no longer require its functionality.
Because the former category has a more or less formal definition much of it can (at least in theory)
be detected automatically. The latter category is often more difficult to detect because there
are no hard rules for it. For example, you may have some code to log the state of a particular object,
and this code &lt;strong&gt;is&lt;/strong&gt; invoked by production code. However, the reason for logging
the state of a particular object is no longer required. Pretty much no automated analysis can
detect this because simply writing down the rules for when such code is dead is at best non-trivial.&lt;/p&gt;
&lt;p&gt;Here are some example categories of dead code along with how we might detect/track such dead code.&lt;/p&gt;
&lt;h3&gt;Unused Variables&lt;/h3&gt;
&lt;p&gt;If you define a variable, but then never use it, the definition is likely dead-code.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;def my_function():
    x = assigned-expr
    # some code that never uses x
&lt;/pre&gt;


&lt;p&gt;Unless the right-hand side of the definition (&lt;code&gt;assigned-expr&lt;/code&gt;) has some side-effect
which is important then the assignment is dead-code and should be removed. Note here
that coverage analysis would tell you that the line is being executed.&lt;/p&gt;
&lt;h4&gt;Detection&lt;/h4&gt;
&lt;p&gt;As noted coverage analysis won't work here, and you would have to use something
like Vulture. Many decent IDEs will also warn you about most such circumstances.&lt;/p&gt;
&lt;h3&gt;Unused Methods/Class definitions&lt;/h3&gt;
&lt;p&gt;If you simple define a method or class which you never then invoke. The exception
here is if you're developing a library or otherwise exposing an interface. In this
case you should have some automated tests which should invoke the method/class.&lt;/p&gt;
&lt;h4&gt;Detection&lt;/h4&gt;
&lt;p&gt;Can generally be done by coverage analysis. There are however some tricky situations
which were described in the above mentioned
&lt;a href="http://www.dougalmatthews.com/2016/Dec/16/finding-dead-code-with-vulture/"&gt;blog post&lt;/a&gt;.
Essentially you may add a unit-test to test a particular method, which later becomes
unused by the actual application but is still invoked by the unit test.&lt;/p&gt;
&lt;h3&gt;Unused Counters&lt;/h3&gt;
&lt;p&gt;At one point, you may have decided to keep a count of some particular occurrence,
such as the number of guesses. Perhaps at one stage you displayed the number of
guesses remaining, but later decided to make the number of guesses unlimited.
You may end up with code that looks something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;guesses = 0
def make_guess():
    guess = get_input()
    global guesses
    guesses += 1
    return guess
&lt;/pre&gt;


&lt;p&gt;Originally your &lt;code&gt;get_input&lt;/code&gt; looked something like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;total_guesses = 20
def get_input():
    remaining = total_guesses - guesses
    return input('You have {} guesses remaining:'.format(remaining))
&lt;/pre&gt;


&lt;p&gt;But since you decided to give unlimited guesses you got rid of that and it is
now simply:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;def get_input():
    return input("Please input a guess:")
&lt;/pre&gt;


&lt;h4&gt;Detection&lt;/h4&gt;
&lt;p&gt;Slightly more tricky this one since the variable &lt;code&gt;guesses&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt; inspected,
it is inspected in the update &lt;code&gt;guesses += 1&lt;/code&gt;. Still you could make ask that your
automated tool ignore such uses and, in this case, still report the variable as
being defined but not used (perhaps Vulture allows this, I don't know).&lt;/p&gt;
&lt;p&gt;However, it is not hard to come up with similar examples in which some value is
maintained but never actually used. For example we might have written something
like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;if total_guesses - guesses &amp;gt; 0:
    guesses += 1
&lt;/pre&gt;


&lt;p&gt;Which would likely fool most automated analyses.&lt;/p&gt;
&lt;p&gt;Of course I've called this category "Counters", but it refers to maintaining any
kind of state that you don't utlimately make use of. You may have originally kept
a list/set of guesses made so far so as to prevent someone making the same guess
more than once. If you later decided against this you might forget to remove
the code which updates the set of guesses that have been made.&lt;/p&gt;
&lt;h3&gt;Unused Web Application Routes&lt;/h3&gt;
&lt;p&gt;You may have a route in your web application which is never linked to by any
part of the rest of your application.
Using &lt;a href="https://pypi.python.org/pypi/Flask/0.12"&gt;Flask&lt;/a&gt;, for this example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;@route('/misc/contact', methods=['GET'])
def contact_page():
    """Display a contact us page"""
    return flask.render_template('contact.jinja')
&lt;/pre&gt;


&lt;p&gt;Now, if, in the rest of your application, you never link to this page, then the
page is not likely to be discovered by a user. You may even have a different
contact page, perhaps called "support" or "feedback". Perhaps this new contact
page was built to replace the older one which it has done, but you left the code for
the old route available.&lt;/p&gt;
&lt;h4&gt;Detection&lt;/h4&gt;
&lt;p&gt;This is tricky. First of all, you may perfectly well have a page which is not
linked to within the remainder of your application but you do want to have
available. For example you may have a route (or routes) for an API used by your
associated mobile application. &lt;/p&gt;
&lt;p&gt;If you have some tests you can use coverage analysis, but if you are doing that
you likely originally had some test which covered this page, even if that unit
test only visited the page and checked that it contained some content, for example
you may have had:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;def test_contact_page(self):
    rv = self.app.get('/misc/contact')
    assert b'id="contact-form"' in rv.data
&lt;/pre&gt;


&lt;p&gt;If this test still runs, then your dead route will still be covered by your tests.
Checking whether or not the method is ever referenced directly will not work because
either such a test will not pick up the unused method because it is used within
the &lt;code&gt;@route&lt;/code&gt; decorator call, or such a test would ignore that but then flag &lt;em&gt;all&lt;/em&gt;
your routes as unused.&lt;/p&gt;
&lt;p&gt;The only relatively robust way would be to check for calls to
&lt;code&gt;flask.url_for("test_contact_page")&lt;/code&gt;. Such a check would have to look in templates
as well. It may &lt;em&gt;still&lt;/em&gt; fail because such a call might never actually be invoked.
So the test would have to check the coverage analysis as well.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I take it for granted that checking for (and removing) dead code is a useful
activity that improves your code quality and removes some of your technical debt
burden. In other words, I take it for granted that dead code represents a form
of technical debt. With that in mind it seems useful to deploy any automated
analyses which can do part of the job for you. However, any code analysis
tool (whether static or dynamic) that cannot detect &lt;strong&gt;all&lt;/strong&gt; (of a class of)
problems, has the disadvantage that it will tend to foster a false sense of completeness.&lt;/p&gt;
&lt;p&gt;The hope is that doing the automatable part automatically frees the developer up
to do the non-automatable parts. In practice I've found that there is a tendency
to move the goal-posts from "remove all dead-code" to "remove all dead-code that
the automated analysis complains about". More generally from "maintain code free
from problem X" to "maintain code such that the automated tools do not complain about
problem X".&lt;/p&gt;
&lt;p&gt;I'm certainly not arguing not to use such automated analyses. However I don't have
a solution for the problem of this implicit and accidental moving (or rather widening)
of the goal posts.&lt;/p&gt;&lt;/div&gt;</description><category>coverage</category><category>dead code</category><category>maintenance</category><category>python</category><guid>https://allanderek.github.io/posts/covering-dead-code/</guid><pubDate>Tue, 03 Jan 2017 12:04:24 GMT</pubDate></item><item><title>In what ways are dynamically typed languages more productive?</title><link>https://allanderek.github.io/posts/dynamically-typed-languages-why/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I do not aim to answer the question in the title more raise the question.
The question kind of implies that dynamically typed languages are more
productive in at least some ways. It does not imply that statically typed
languages are less productive in general, or the opposite.&lt;/p&gt;
&lt;p&gt;Before going any further, I'm talking about the distinction between static
and dynamic typing which is not the same as strong vs weak typing. Static
means the type checking is done at compilation before the program is run, whilst
dynamic means types are checked whilst the program is running. Not the same as
weak vs strong typing and also not the same as explicit vs implicit typing.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;My PhD involved the development of a novel static type
system. When I begun my PhD I was firmly of the opinion that
statically typed languages were better than dynamically typed
languages. My basic contention was that all the guarantees you get
from static types you get largely for free, so throwing those away is a
stupefying act of self harm. I believe that prior to the turn of the
century (if not a bit later), this the majority view in programming language
research. It is still a position commonly held but I'm unsure whether it may
still be a majority view or not.&lt;/p&gt;
&lt;p&gt;New data, should force us to seek out new theories which explain
all of the available data. In the past 20 years, one thing is obvious.
Dynamically typed languages have seen significant growth and success.
Some researchers choose to ignore this. Some explain the success as a
fluke, that such languages have become popular &lt;em&gt;despite&lt;/em&gt; being
dynamically typed. This is a recurrence of an argument made by
functional programmers/researchers when C++ and then Java became wildly popular.&lt;/p&gt;
&lt;p&gt;The prevailing view amongst researchers was that functional languages were inherently
better than Java, but Java got a lot of financial support which meant
that a lot of support was added to, in particular, the standard
library. This meant that programmers were particularly productive
using Java, but that that increase in productivity was mis-attributed
by the programmers to the language, when it should have been placed
firmly in the excellent standard library support. Much of this support
is work that open source programmers are not quite so keen on, because
frankly, it's a bit boring and unrewarding. I personally find this
argument at least lightly compelling.&lt;/p&gt;
&lt;p&gt;However, in the first decade of this century, as I said, dynamically typed
languages have had at least significant success. Python, PHP,
and Ruby are the most obvious examples. None of these were backed
financially by any large corporation, at least not prior to their success.
I again suspect that much of the productivity gained with the use of such
languages can be placed in the library support. But that does not explain
where the library support has come from. If dynamically typed languages were so
obviously counter-productive, then why did anyone waste their time
writing library support code in-and-for them?&lt;/p&gt;
&lt;h2&gt;Some Wild Hypotheses Appear&lt;/h2&gt;
&lt;p&gt;I am now going to state some hypotheses to explain this. This does not mean
I endorse any of these.&lt;/p&gt;
&lt;h3&gt;Short term vs Long Term&lt;/h3&gt;
&lt;p&gt;One possible answer. Dynamically typed languages increase &lt;em&gt;short term&lt;/em&gt;
productivity at the cost of &lt;em&gt;long term&lt;/em&gt; productivity. I don't personally
believe this but I do find it plausible. However, I do not know of any
evidence for or against this position. I'm not even sure there is much
of a logical argument for it.&lt;/p&gt;
&lt;p&gt;The kinds of bugs that functional programming languages help prevent
are the kind of bug that is hard to demonstrate. It is easy enough to show
a bug in an imperative program that would not occur in a functional program
because you do not have mutable state. However, such demonstration bugs
tend to be a bit contrived, and it is hard to show that such bugs come up in
real code frequently. On top of that, to show that functional languages are
more productive one would have to show that by restricting mutable state you
do not lose more productivity than you gain by avoiding such bugs. If you did
manage to show this, you would have a reasonable argument that functional
languages are bad for short-term productivity, due to the restrictions on
mutable state changes, but compensate in greater long-term productivity.&lt;/p&gt;
&lt;p&gt;So, a similar kind of argument could be made for statically typed languages.
If you could show that statically typed languages prevent a certain class of
bugs and that the long-term productivity gained from that is more than enough
to compensate for any short-term loss in productivity brought on by restrictions
due to the type-system.&lt;/p&gt;
&lt;p&gt;So I will leave my verdict on this hypothesis as, I believe it to be false
but it is plausible. Just to note, there is no great evidence that &lt;em&gt;either&lt;/em&gt;
statically typed languages have greater long-term productivity,
&lt;strong&gt;or&lt;/strong&gt; that dynamically typed languages have greater short-term productivity.&lt;/p&gt;
&lt;h3&gt;Testing Tools&lt;/h3&gt;
&lt;p&gt;A trend that seems to have tracked (ie. correlates with, either via
causation in either direction or by coincidence) the trend in use of
(and success of) dynamically typed languages is the trend towards more
rigorous testing, or rather the rise in popularity of more rigorous testing.
In particular test-driven development style methodologies have gained
significant support.&lt;/p&gt;
&lt;p&gt;I believe that having a comprehensive test suite, somewhat dilutes the
benefits gained from a static type system. Here is a good challenge,
try to find a bug that is caught by the type checker, that would not be
caught by a test suite with 100% code coverage.&lt;/p&gt;
&lt;p&gt;One possibility is an exhaustive pattern match, however, if your test suite
is not catching this, it's not a great test suite. Still, exhaustive pattern
match tests is something you get more or less for free with a static type checker,
whilst a test suite has to work at it.&lt;/p&gt;
&lt;p&gt;It is certainly possible to come up with a bug that is caught by static type checking
and not by a test suite that has full coverage. Here is an example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This is a bug, because &lt;code&gt;b&lt;/code&gt; might be true, whilst &lt;code&gt;a&lt;/code&gt; is false. Which
would mean that &lt;code&gt;x&lt;/code&gt; is set to a string, but later treated as an integer,
because &lt;code&gt;b&lt;/code&gt; is true. A good test suite, will of course catch
this bug. But it is still possible to achieve 100% code coverage (at
the statement) level, and &lt;em&gt;not&lt;/em&gt; catch this bug. Still, you have to try
quite hard to arrange this.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Mutation_testing"&gt;Mutation testing&lt;/a&gt;,
which tests your tests, rather than your implementation code, should
catch this simple example (because it will mutate the condition
&lt;code&gt;(a and b)&lt;/code&gt; to be &lt;code&gt;(a or b)&lt;/code&gt; which won't make any difference if your tests
never caught the bug initially. This will mean that the mutant will
pass all tests, and you should at that point realise your tests are
not comprehensive enough.&lt;/p&gt;
&lt;h3&gt;Dynamically Typed Language Benefits&lt;/h3&gt;
&lt;p&gt;So you should have a comprehensive test suite for all code whether you are
using a statically or dynamically typed language. We may then accept the
theory that a comprehensive test suite somewhat dilutes any benefits of using
a statically typed language. However, that theory does not give any reasaon why
a static type system is detrimental to productivity.&lt;/p&gt;
&lt;p&gt;This was always my main contention, that whatever might
be the benefits of static typing, you are getting them for free, so
why not? I honestly do not know what, if any, benefit there is from
having a dynamic type system. I can think of some plausible
candidates, but have no evidence that any of these are true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Freeing the &lt;em&gt;language&lt;/em&gt; from a type system, allows the language
designers to include some productivity boosting features that are not
available in a statically typed language. I find this suggestion a little weak,
no one has ever been able to point me to such a language feature.&lt;/li&gt;
&lt;li&gt;Knowing there is no safety net of the type system encourages
developers to test (and document) more. I find this theory more compelling.&lt;/li&gt;
&lt;li&gt;One can try simple modifications without the need to make many
fiddly changes, such as, for example, adding an exception to a method
signature, often in many places.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I suspect, that if there are significant benefits to using a dynamically
typed language, then it is a combination of 2 and 3, or some other reason.&lt;/p&gt;
&lt;p&gt;For the third, a rebuttal often mentions automatic refactoring tools.
Which may well in theory be something of a good rebuttal, but in practice developers simply
don't use such tools often. I'm not sure why not, I myself have never
taken to them. So perhaps there is a productivity gain from using a
dynamically typed language which &lt;em&gt;would&lt;/em&gt; be all but negated if only
the developers would use automatic refactoring tools, but they don't.
So it &lt;em&gt;shouldn't&lt;/em&gt; be a productivity win for dynamically typed
languages, but in practice it is (this is all still conjecture).&lt;/p&gt;
&lt;p&gt;The second one has some evidence from psychology. There is a lot of
evidence to suggest that safety mechanisms often do not increase
overall safety but simply allow more risky behaviour. A very famous
example is a seat-belt study done in Germany. Wherein mandating the
wearing of seat-belts caused drivers to drive faster. This means that
you are more likely to have a crash, but less likely to be seriously
injured in one. This has similarly been done with anti-lock braking
systems, where the brakes being significantly better did not reduce
accidents but rather increased risky driving so that the number of
accidents remained largely constant.&lt;/p&gt;
&lt;p&gt;I mentioned documentation because it's an important one. There are
plenty of libraries for statically typed languages for which the only
documentation for many of the functions/methods is the type signature.
This is often seen as "good enough", or at least good enough to mean
that API documentation is not at the top of the todo stack.
A dynamically-typed language does not typically have signatures for
methods/functions. As a result, they tend to have fewer undocumented
libraries, simply because the developer of the library knows that
their methods will otherwise not be used. If that is the case, what is
the point in the library? So they tend to write &lt;em&gt;something&lt;/em&gt;, and once
you are writing &lt;em&gt;something&lt;/em&gt; it isn't so hard to write something
useful.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This is getting too long. So I'll stop there for now. The main points are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dynamically typed languages have had a lot of success this
century, which remains largely unexplained&lt;/li&gt;
&lt;li&gt;I think that with comprehensive testing, the gains from a static
type system are diluted significantly&lt;/li&gt;
&lt;li&gt;It might be that dynamically typed language encourage more/better
testing (or have some other non-obvious advantage)&lt;/li&gt;
&lt;li&gt;Otherwise, there is scant evidence for anything a dynamically
typed language actually does &lt;em&gt;better&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;I think an obvious win for statically typed languages would be to
make the type checking phase optional.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am not sure why we do not really see any examples of languages
that have optional static type checking. In other words languages in which
the user decided when type checking should be done.&lt;/p&gt;
&lt;p&gt;As a final point. For dynamically typed languages, it is common to
deploy some form of static analyser. Often these static analysers fall short of
the kind of guarantees afforded by a static type system, but they have
two significant advantages. Firstly, you can run the program without
running the static analyser. In particular, you can run your test
suite, which may well give you more information about the correctness
of your code than a type checker would. Especially in the case that
the type checker fails. It tells you about one specific problem in
your code, but not how the rest of your code does or does not pass
your tests. Secondly you can deploy different static analysers for
different problems. For example a statically typed language has to
decide whether or not to include exceptions in types. A dynamically
typed language can easily offer both. I suppose a statically typed
language &lt;em&gt;could&lt;/em&gt; offer both as well.&lt;/p&gt;&lt;/div&gt;</description><category>dynamically typed languages</category><category>python</category><category>statically typed languages</category><category>testing</category><category>typing</category><guid>https://allanderek.github.io/posts/dynamically-typed-languages-why/</guid><pubDate>Wed, 04 May 2016 19:41:57 GMT</pubDate></item><item><title>Selenium and Javascript Events</title><link>https://allanderek.github.io/posts/selenium-and-javascript-events/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;p&gt;Selenium is a great way to test web applications and it has Python bindings.
I explained in a &lt;a href="https://allanderek.github.io/posts/flask-%2B-coverage-analysis"&gt;previous post&lt;/a&gt; how to
set this up with coverage analysis.&lt;/p&gt;
&lt;p&gt;However, writing tests is non-trivial, in particular it is easy enough to write
tests that suffer from race conditions. Suppose you write a test that includes
a check for the existence of a particular DOM element. Here is a convenient method
to make doing so a one-liner. It assumes that you are within a class that has
the web driver as a member and that you're using 'pytest' but you can easily
adapt this for your own needs.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;assertCssSelectorExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;css_selector&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;""" Asserts that there is an element that matches the given&lt;/span&gt;
&lt;span class="sd"&gt;    css selector."""&lt;/span&gt;
    &lt;span class="c1"&gt;# We do not actually need to do anything special here, if the&lt;/span&gt;
    &lt;span class="c1"&gt;# element does not exist we fill fail with a NoSuchElementException&lt;/span&gt;
    &lt;span class="c1"&gt;# however we wrap this up in a pytest.fail because the error message&lt;/span&gt;
    &lt;span class="c1"&gt;# is then a bit nicer to read.&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_selector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Element {0} not found!"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;css_selector&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The problem is that this test might fail if it is performed too early. If you
are merely testing after loading a page, this should work, however you may be
testing after some click by a user which invokes a Javascript method.&lt;/p&gt;
&lt;p&gt;Suppose you have an application which loads a page, and then loads all comments
made on that page (perhaps it is a blog engine). Now suppose you wish to allow
re-loading the list of comments without re-loading the entire page. You might
have an Ajax call.&lt;/p&gt;
&lt;p&gt;As before I tend to write my Javascript in Coffeescript, so suppose I have a
Coffeescript function which is called when the user clicks on a
&lt;code&gt;#refresh-comment-feed-button&lt;/code&gt; button:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;refresh_comments = &lt;/span&gt;&lt;span class="nf"&gt;(page_id) -&amp;gt;&lt;/span&gt;
  &lt;span class="nv"&gt;posting = &lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="s"&gt;'/grabcomments'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;page_id: &lt;/span&gt;&lt;span class="nx"&gt;page_id&lt;/span&gt;
  &lt;span class="nx"&gt;posting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="nx"&gt;receive_comments&lt;/span&gt;
  &lt;span class="nx"&gt;posting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt; &lt;span class="nf"&gt;(data) -&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;So this makes an Ajax call which will call the function &lt;code&gt;receive_comments&lt;/code&gt;
when the Ajax call returns (successfully). We write the &lt;code&gt;receive_comments&lt;/code&gt; as:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;receive_comments = &lt;/span&gt;&lt;span class="nf"&gt;(data) -&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="nx"&gt;comments&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt; &lt;span class="nx"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;those&lt;/span&gt; &lt;span class="nx"&gt;returned&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Typically &lt;code&gt;data&lt;/code&gt; will be some JSON data, perhaps the comments associated with
the &lt;code&gt;page_id&lt;/code&gt; we gave as an argument to our Ajax call.&lt;/p&gt;
&lt;p&gt;To test this you would navigate to the page in question and check
that there are no comments, then open a new browser window and make two
comments (or alternatively directly adding the comments to the database),
followed by switching back to the first browser window and then
performing the following steps:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;refresh_comment_feed_css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'#refresh-comment-feed-button'&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click_element_with_css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;refresh_comment_feed_css&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_comments&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;first_comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_comment&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Where &lt;code&gt;self.check_comments&lt;/code&gt; is a method that checks the particular comments
exist on the current page. This could be done by using
&lt;code&gt;find_elements_by_css_selector&lt;/code&gt; and then looking at the &lt;code&gt;text&lt;/code&gt; attributes of
each returned element.&lt;/p&gt;
&lt;p&gt;The problem is, that the final line is likely to be run before the results of
the Ajax call invoked from the click on the &lt;code&gt;#refresh-comment-feed-button&lt;/code&gt; are
returned to the page.&lt;/p&gt;
&lt;p&gt;A quick trick to get around this is to simply change the Javascript to somehow
record when the Ajax results are returned and then use Selenium to wait until
the relevant Javascript evaluates to true.&lt;/p&gt;
&lt;p&gt;So we change our &lt;code&gt;receive_comments&lt;/code&gt; method to be:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;comments_successfully_updated = &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;receive_comments = &lt;/span&gt;&lt;span class="nf"&gt;(data) -&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="nx"&gt;comments&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt; &lt;span class="nx"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;those&lt;/span&gt; &lt;span class="nx"&gt;returned&lt;/span&gt;
  &lt;span class="nx"&gt;comments_successfully_updated&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Note that we only increment the counter after we have updated the page.&lt;/p&gt;
&lt;p&gt;Now, we can update our Selenium test to be:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;refresh_comment_feed_css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'#refresh-comment-feed-button'&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click_element_with_css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;refresh_comment_feed_css&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_comment_refresh_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_comments&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;first_comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_comment&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;1&lt;/code&gt; argument assumes that this will be the first time the comments are
updated during your test. Of course as you run down your test you can increase
this argument as required. The code for the &lt;code&gt;wait_for_comment_refresh_count&lt;/code&gt;
is given by:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;expected_conditions&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# assume that 'self.driver' is set appropriately.&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wait_for_comment_refresh_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_refresh_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'return comments_successfully_updated;'&lt;/span&gt;
            &lt;span class="n"&gt;feed_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;feed_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
        &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_refresh_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The key point is executing the Javascript to check the
&lt;code&gt;comments_successfully_updated&lt;/code&gt; variable with &lt;code&gt;driver.execute_script&lt;/code&gt;.
We then use a &lt;code&gt;WebDriverWait&lt;/code&gt; to wait for a maximum of 5 seconds until the
our condition is satisfied.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Updating a Javascript counter to record when Javascript events have occurred
can allow your Selenium tests to synchronise, that is, wait for the correct time
to check the results of a Javascript event.&lt;/p&gt;
&lt;p&gt;This can solve problems of getting a &lt;code&gt;StaleElementReferenceException&lt;/code&gt; or a
&lt;code&gt;NoSuchElementException&lt;/code&gt; because your Selenium test is running a check on an
element too early before your page has been updated.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>selenium</category><category>testing</category><guid>https://allanderek.github.io/posts/selenium-and-javascript-events/</guid><pubDate>Wed, 16 Mar 2016 18:02:32 GMT</pubDate></item><item><title>Method Cascading</title><link>https://allanderek.github.io/posts/method-cascading/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;h2&gt;Method Cascading&lt;/h2&gt;
&lt;p&gt;Vasudev Ram has a thoughful &lt;a href="http://jugad2.blogspot.co.uk/2016/02/examples-of-method-chaining-in-python.html"&gt;post about method chaining/cascading&lt;/a&gt;
that I picked up from &lt;a href="http://planetpython.org/"&gt;planet python&lt;/a&gt; in which he
basically argues for the use of method cascading. I'm going to disagree.
Essentially, I simply don't understand any benefit of using cascading. It's a
nice post though and includes some references to other method cascading links.&lt;/p&gt;
&lt;p&gt;Method chaining is the writing of multiple method calls directly after one
another, usually on the same line, such as (to take Vasudev's example):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;foo.bar().baz()
&lt;/pre&gt;


&lt;p&gt;Cascading is the specific case of chaining in which each intermediate object
is the same object. To achieve this &lt;code&gt;bar&lt;/code&gt; must return &lt;code&gt;self&lt;/code&gt; (in Python, or
&lt;code&gt;this&lt;/code&gt; in other object oriented languages).&lt;/p&gt;
&lt;p&gt;Here is Vasudev's first example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let's say we have a class Foo that contains two methods, bar and baz.
We create an instance of the class Foo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;foo = Foo()
&lt;/pre&gt;


&lt;p&gt;Without method chaining, to call both bar and baz in turn, on the object foo, we would do this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# Fragment 1
foo.bar() # Call method bar() on object foo.
foo.baz() # Call method baz() on object foo.
&lt;/pre&gt;


&lt;p&gt;With method chaining, we can this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;# Fragment 2
# Chain calls to methods bar() and baz() on object foo.
foo.bar().baz()
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;p&gt;So the claim for method cascading then is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One advantage of method chaining is that it reduces the number of times you
have to use the name of the object: only once in Fragment 2 above, vs. twice
in Fragment 1; and this difference will increase when there are more method
calls on the same object. Thereby, it also slightly reduces the amount of code
one has to read, understand, test, debug and maintain, overall.
Not major benefits, but can be useful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So method cascading reduces the number of times you have to use the name of an
object, but this makes it inherently less explicit that you're operating on the
same object. Looking at &lt;code&gt;foo.bar().baz()&lt;/code&gt; does not tell me that &lt;code&gt;baz&lt;/code&gt; is being
called on the same object as &lt;code&gt;bar&lt;/code&gt;. Unless you're keen on method cascading and
use it yourself, it looks like the opposite.&lt;/p&gt;
&lt;p&gt;Method cascading may therefore reduce&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the amount of code one has to read, understand, test, debug and maintain, overall.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However it does so, only in a "code-golf" way. There is no point in reducing
the amount of code to understand if by doing so you increase the difficulty with
which you can understand it.&lt;/p&gt;
&lt;p&gt;A common example of method cascading is one Vasudev includes, that of string
processing. Here we have a line such as (which I've translated into Python 3):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;print ('After uppercase then capitalize:',
        sp.dup().uppercase().capitalize().rep())
&lt;/pre&gt;


&lt;p&gt;Whilst it is quite nice to be able to do this in one line without using a new
variable name, I would write this without method cascading as:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;duplicate = sp.dup()
duplicate.uppercase()
duplicate.capitalize()
print('After uppercase then capitalize:', duplicate.rep())
&lt;/pre&gt;


&lt;p&gt;Now it is obvious that &lt;code&gt;dup&lt;/code&gt; returns something new, in this case it is a
duplicate of the original string. It is also clear that &lt;code&gt;uppercase&lt;/code&gt; and
&lt;code&gt;capitalize&lt;/code&gt; do &lt;em&gt;not&lt;/em&gt; return new objects but modify the &lt;code&gt;duplicate&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;So, I'm afraid I just don't see the use case for cascading.&lt;/p&gt;&lt;/div&gt;</description><category>coding style</category><category>python</category><guid>https://allanderek.github.io/posts/method-cascading/</guid><pubDate>Tue, 23 Feb 2016 14:54:35 GMT</pubDate></item><item><title>Test First and Mutation Testing</title><link>https://allanderek.github.io/posts/test-first-mutation-testing/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;h2&gt;Test First and Mutation Testing&lt;/h2&gt;
&lt;p&gt;I'm going to argue that mutation testing has a strong use in a test first
development environment and I'll conclude by proposing a mechanism to link
mutation testing to the source code control mechanism to further aid test first
development.&lt;/p&gt;
&lt;h3&gt;Test First&lt;/h3&gt;
&lt;p&gt;Just to be clear, when I say 'test first' I mean development in which before
writing a feature, or fixing a bug, you first write a test which should only
pass once you have completed that feature. For the purposes of this post you
needn't be doing that for every line of code you write. The idea here applies
whether you are writing the odd feature by first writing a test for it, or
whether you have a strict policy of writing no code until there is a test for
it.&lt;/p&gt;
&lt;h3&gt;Mutation Testing&lt;/h3&gt;
&lt;p&gt;Mutation testing is the process of automatically changing some parts of your
source code generally to check that your test suite is not indifferent to the
change. For example, your source code may contain a conditional statement
such as the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now if we suppose that the current condition is correct, then changing it to
a similar but different condition, for example &lt;code&gt;x &amp;gt;= 0&lt;/code&gt; or &lt;code&gt;x &amp;gt; 1&lt;/code&gt; then
presumably this would turn correct code into incorrect code. If your tests are
comprehensive then at least one of them should fail due to the now incorrect
code.&lt;/p&gt;
&lt;h3&gt;Fail First&lt;/h3&gt;
&lt;p&gt;It's easy enough to unintentionally write a test that always passes, or perhaps
passes too easily. One of the reasons for writing the test first is to make sure
that it fails when the feature has not yet been implemented (or fixed). However,
often such a test can fail for trivial reasons. For example you may write a unit
test that fails simple because the method it tests is not yet defined. Similarly
a web test may fail because the route is not yet defined. Unless you continue to
run the test during development of your feature you won't necessarily know that
your test is particularly effective at catching when your feature is broken.&lt;/p&gt;
&lt;h3&gt;Fail After&lt;/h3&gt;
&lt;p&gt;Whether you write the test before your new feature or after the feature is
ready, mutation testing can assist with the problem of non-stringent tests.
Mutation testing can assist in reassuring you that your new test is effective at
catching errors, whether those errors are introduced when the feature is
developed or through later changes. If you apply lots of mutations to your code
and your new test never fails then there is a strong likelihood that you have an
ineffective test that passes too easily.&lt;/p&gt;
&lt;h3&gt;Source Code control&lt;/h3&gt;
&lt;p&gt;A feature I would like to add to a mutation test package is to integrate with
a source code control mechanism such as Git. The mutation tester must choose
lines of the program to mutate. However, your new test is presumably aimed at
testing the new code that you write. Hence we could use the source code control
mechanism to mutate lines of code that are newer than the test or some specified
commit. That way we would focus our mutation testing to testing the efficacy of
the new test(s) with respect to the new or changed lines of code.&lt;/p&gt;
&lt;p&gt;This does not preclude doing general mutation testing for features that, for
example, depend upon a lot of existing code. Perhaps your new feature is simply
a display of existing calculations.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutation testing helps find tests that are ineffective.&lt;/li&gt;
&lt;li&gt;This plays particularly well with a test first development process in which
    the test often fails the first time for trivial reasons, thus giving you
    false assurance that your test can fail.&lt;/li&gt;
&lt;li&gt;Integrating source code control to target the mutations towards new code
    could improve this significantly, or at least make it a bit more convenient.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>mutation testing</category><category>python</category><category>scc</category><category>testing</category><guid>https://allanderek.github.io/posts/test-first-mutation-testing/</guid><pubDate>Fri, 19 Feb 2016 10:14:43 GMT</pubDate></item><item><title>Placement of Python Import Statements</title><link>https://allanderek.github.io/posts/import-placement/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/#imports"&gt;Pep 8 specifies&lt;/a&gt;
that all import statements should be "put at the top of the file, just after any
module comments and docstrings, and before module globals and constants."
However, it does not really specify the logic behind this. I'm going to try to
articulate some reasons to have import statements somewhere other than directly
at the top of the file. I'll also state some arguments for having such
&lt;code&gt;import&lt;/code&gt; statements at the top.&lt;/p&gt;
&lt;p&gt;Note, that
&lt;a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds"&gt;Pep 8 also specifies&lt;/a&gt;
that it is important to "know when to be inconsistent -- sometimes the style guide just doesn't
apply. When in doubt, use your best judgment". So the purpose of this post is to
suggest some reasons why you might deviate from the style guide with respect to
&lt;code&gt;import&lt;/code&gt; statements at the top.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://allanderek.github.io/posts/import-placement/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>https://allanderek.github.io/posts/import-placement/</guid><pubDate>Wed, 03 Feb 2016 13:08:54 GMT</pubDate></item><item><title>Update: Flask+Coverage</title><link>https://allanderek.github.io/posts/update-flask%2Bcoverage/</link><dc:creator>Allan Clark</dc:creator><description>&lt;div&gt;&lt;h2&gt;Update: Flask+Coverage Analysis&lt;/h2&gt;
&lt;p&gt;In a &lt;a href="https://allanderek.github.io/posts/flask-%2B-coverage-analysis"&gt;previous post&lt;/a&gt;
I demonstrated how to get &lt;code&gt;coverage&lt;/code&gt; analysis working for a Flask web application
in a relatively simple manner. In the section &lt;em&gt;"At then end of your tests"&lt;/em&gt; I
stated that you needed your tests to clean-up by telling the server to shutdown.
The end of your test code would look something like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'shutdown'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This could have made things a little fiddly since your test code would have to
make sure to access the &lt;code&gt;shutdown&lt;/code&gt; route exactly once, regardless of how many
tests were run.&lt;/p&gt;
&lt;p&gt;However, I realised that we could remove the burden from the test code by
simply doing this in &lt;code&gt;manage.py&lt;/code&gt; file.&lt;/p&gt;
&lt;h3&gt;Updated &lt;code&gt;manage.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Previously, we had the following code within our &lt;code&gt;manage.py&lt;/code&gt; script within the
&lt;code&gt;run_with_test_server&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;test_process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server_return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We now update this to be:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;test_process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TEST_SERVER_PORT'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;shutdown_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:{}/shutdown'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shutdown_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;server_return_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Doing so means you can just write your tests without any need to worry about
shutting down the server.
The &lt;a href="https://github.com/allanderek/flask-coverage-example"&gt;example repository&lt;/a&gt;
has been appropriately updated.&lt;/p&gt;&lt;/div&gt;</description><category>coverage</category><category>python</category><category>selenium</category><category>testing</category><guid>https://allanderek.github.io/posts/update-flask%2Bcoverage/</guid><pubDate>Tue, 26 Jan 2016 14:59:44 GMT</pubDate></item></channel></rss>